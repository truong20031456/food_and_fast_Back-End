version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: user_service_postgres
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - user_service_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: user_service_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - user_service_network

  # User Service (Development)
  user_service_dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: user_service_dev
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8002
      - DEBUG=true
      - SECRET_KEY=dev_secret_key_change_in_production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
    ports:
      - "8002:8002"
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - user_service_network
    restart: unless-stopped

  # User Service (Production)
  user_service_prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user_service_prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/user_db
      - REDIS_URL=redis://redis:6379/0
      - HOST=0.0.0.0
      - PORT=8002
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-prod_secret_key_change_this}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
    ports:
      - "8003:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - user_service_network
    restart: unless-stopped
    profiles:
      - production

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: user_service_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - user_service_prod
    networks:
      - user_service_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  user_service_network:
    driver: bridge 