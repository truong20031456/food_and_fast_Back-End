name: User Service CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
    paths:
      - '**'
  pull_request:
    branches: [main, develop]
    paths:
      - '**'

env:
  PYTHON_VERSION: '3.11'
  SERVICE_NAME: user-service
  SERVICE_PORT: 8002
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/user-service

jobs:
  # =============================================================================
  # CODE QUALITY & LINTING
  # =============================================================================
  lint:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy bandit safety ruff
        
    - name: üîç Run Ruff (fast linter)
      run: |
        ruff check . --output-format=github
        ruff format --check .
        
    - name: üîç Run Black (code formatting)
      run: |
        black --check --diff .
        
    - name: üîç Run Flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: üîç Run MyPy (type checking)
      run: |
        mypy . --ignore-missing-imports --show-error-codes

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üîí Run Bandit security linter
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        
    - name: üîí Run Safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check --text --output safety-report.txt || true
        
    - name: üîí Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_user_service_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx pytest-xdist
        
    - name: üîß Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://test_user:postgres@localhost:5432/test_user_service_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci_cd_$(date +%s)" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        
    - name: ‚è≥ Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: ‚è≥ Wait for Redis
      run: |
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
    - name: ‚úÖ Run tests with pytest
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:postgres@localhost:5432/test_user_service_db
        REDIS_URL: redis://localhost:6379/0
        DEBUG: true
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html -n auto
        
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: user-service
        name: user-service-coverage
        fail_ci_if_error: false
        
    - name: üì¶ Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # =============================================================================
  # DOCKER BUILD & TEST
  # =============================================================================
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üê≥ Build and test Docker image
      run: |
        # Build production image
        docker build -t ${{ env.IMAGE_NAME }}:test .
        
        # Test the image
        docker run --rm ${{ env.IMAGE_NAME }}:test python -c "import fastapi; print('‚úÖ FastAPI import successful')"
        docker run --rm ${{ env.IMAGE_NAME }}:test python -c "import sqlalchemy; print('‚úÖ SQLAlchemy import successful')"
        
        # Test health endpoint (if possible)
        docker run -d --name test-container ${{ env.IMAGE_NAME }}:test
        sleep 10
        docker exec test-container curl -f http://localhost:${{ env.SERVICE_PORT }}/health || echo "Health check not available"
        docker stop test-container
        docker rm test-container

  # =============================================================================
  # BUILD & PUSH DOCKER IMAGE
  # =============================================================================
  build:
    name: üöÄ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üè∑Ô∏è Generate tags
      id: tags
      run: |
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable" >> $GITHUB_OUTPUT
        fi
        if [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
          echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop" >> $GITHUB_OUTPUT
        fi
        
    - name: üê≥ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        labels: |
          org.opencontainers.image.title=User Service
          org.opencontainers.image.description=User management microservice for Food & Fast E-Commerce
          org.opencontainers.image.vendor=Food & Fast
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.tags.outputs.created }}

  # =============================================================================
  # DEPLOYMENT - STAGING
  # =============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ÔøΩÔøΩ Deploy to staging
      run: |
        echo "üöÄ Deploying user service to staging environment..."
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üè∑Ô∏è Tag: develop"
        echo "‚è∞ Timestamp: $(date)"
        
        # Add your staging deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: ‚úÖ Health check staging
      run: |
        echo "üîç Performing health check on staging deployment..."
        # Add health check logic here
        sleep 30
        echo "‚úÖ Staging deployment health check completed"

  # =============================================================================
  # DEPLOYMENT - PRODUCTION
  # =============================================================================
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Deploy to production
      run: |
        echo "üöÄ Deploying user service to production environment..."
        echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üè∑Ô∏è Tag: stable"
        echo "‚è∞ Timestamp: $(date)"
        
        # Add your production deployment logic here
        # Example: kubectl apply, docker-compose, etc.
        
    - name: ‚úÖ Health check production
      run: |
        echo "üîç Performing health check on production deployment..."
        # Add health check logic here
        sleep 30
        echo "‚úÖ Production deployment health check completed"

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: üì¢ Send notification
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üéâ User service has been deployed successfully"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        else
          echo "‚ùå Deployment failed!"
          echo "üö® User service deployment failed"
        fi 