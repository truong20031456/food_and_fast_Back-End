name: User Service CI/CD Pipeline

on:
  push:
    branches: [feature/user_service]
    paths:
      - 'user_service/**'
      - '.github/workflows/ci-user-service.yml'
  pull_request:
    branches: [feature/user_service]
    paths:
      - 'user_service/**'
      - '.github/workflows/ci-user-service.yml'

env:
  PYTHON_VERSION: '3.11'
  SERVICE_NAME: user-service
  SERVICE_PORT: 8002
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-user-service

jobs:
  # =============================================================================
  # CODE QUALITY & LINTING
  # =============================================================================
  lint:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy bandit safety ruff
        
    - name: üîç Run Ruff (fast linter & formatter)
      run: |
        ruff format .
        ruff check . --output-format=github
        ruff format --check .
        
    - name: üîç Run Black (code formatting)
      run: |
        black --check --diff .
        
    - name: üîç Run Flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: üîç Run MyPy (type checking)
      run: |
        mypy . --ignore-missing-imports --show-error-codes
      continue-on-error: true  # Don't fail build on type errors

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt bandit safety
        
    - name: üîí Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
      continue-on-error: true
        
    - name: üîí Run Safety check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
        
    - name: üîí Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_user_service_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx pytest-xdist pytest-mock
        
    - name: üîß Set up environment variables
      run: |
        cat << EOF >> $GITHUB_ENV
        DATABASE_URL=postgresql+asyncpg://test_user:postgres@localhost:5432/test_user_service_db
        REDIS_URL=redis://localhost:6379/0
        SECRET_KEY=test_secret_key_for_ci_cd_$(date +%s)
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=30
        REFRESH_TOKEN_EXPIRE_DAYS=7
        DEBUG=true
        TESTING=true
        EOF
        
    - name: ‚è≥ Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost ping | grep -q PONG; do sleep 2; done'
        
    - name: ‚úÖ Run tests with pytest
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html --cov-fail-under=80 -n auto
        
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage.xml
        flags: user-service
        name: user-service-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: üì¶ Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ github.run_id }}
        path: htmlcov/
        retention-days: 30

  # =============================================================================
  # DOCKER BUILD & TEST
  # =============================================================================
  docker-build:
    name: üê≥ Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üê≥ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üß™ Test Docker image
      run: |
        # Test basic imports
        docker run --rm ${{ env.IMAGE_NAME }}:test python -c "
        try:
            import fastapi
            import sqlalchemy
            import redis
            print('‚úÖ All imports successful')
        except ImportError as e:
            print(f'‚ùå Import failed: {e}')
            exit(1)
        "
        
        # Test container health
        docker run -d --name test-container -p ${{ env.SERVICE_PORT }}:${{ env.SERVICE_PORT }} ${{ env.IMAGE_NAME }}:test
        sleep 15
        
        # Try health check
        if curl -f -m 10 http://localhost:${{ env.SERVICE_PORT }}/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check not available or failed"
        fi
        
        docker stop test-container
        docker rm test-container

  # =============================================================================
  # BUILD & PUSH DOCKER IMAGE
  # =============================================================================
  build:
    name: üöÄ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üê≥ Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
        labels: |
          org.opencontainers.image.title=User Service
          org.opencontainers.image.description=User management microservice for Food & Fast E-Commerce
          org.opencontainers.image.vendor=Food & Fast
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        
    - name: üê≥ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false  # Disable provenance for better compatibility

  # =============================================================================
  # DEPLOYMENT - STAGING
  # =============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging-user-service.example.com
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üöÄ Deploy to staging
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        echo "üöÄ Deploying user service to staging environment..."
        echo "üì¶ Image: ${{ env.IMAGE_TAG }}"
        echo "üè∑Ô∏è Tag: develop"
        echo "‚è∞ Timestamp: $(date -Iseconds)"
        
        # Example deployment commands:
        # kubectl set image deployment/user-service user-service=${{ env.IMAGE_TAG }} -n staging
        # helm upgrade user-service ./helm/user-service --set image.tag=${{ github.sha }} -n staging
        # docker-compose -f docker-compose.staging.yml pull && docker-compose -f docker-compose.staging.yml up -d
        
    - name: ‚úÖ Health check staging
      timeout-minutes: 5
      run: |
        echo "üîç Performing health check on staging deployment..."
        # Replace with actual staging URL
        STAGING_URL="https://staging-user-service.example.com"
        
        for i in {1..30}; do
          if curl -f -s "$STAGING_URL/health" > /dev/null; then
            echo "‚úÖ Staging deployment health check passed"
            exit 0
          fi
          echo "Attempt $i/30: Waiting for service to be ready..."
          sleep 10
        done
        
        echo "‚ùå Staging health check failed"
        exit 1

  # =============================================================================
  # DEPLOYMENT - PRODUCTION
  # =============================================================================
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://user-service.example.com
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üöÄ Deploy to production
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        echo "üöÄ Deploying user service to production environment..."
        echo "üì¶ Image: ${{ env.IMAGE_TAG }}"
        echo "üè∑Ô∏è Tag: stable"
        echo "‚è∞ Timestamp: $(date -Iseconds)"
        
        # Example deployment commands:
        # kubectl set image deployment/user-service user-service=${{ env.IMAGE_TAG }} -n production
        # helm upgrade user-service ./helm/user-service --set image.tag=${{ github.sha }} -n production
        # docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d
        
    - name: ‚úÖ Health check production
      timeout-minutes: 5
      run: |
        echo "üîç Performing health check on production deployment..."
        # Replace with actual production URL
        PROD_URL="https://user-service.example.com"
        
        for i in {1..30}; do
          if curl -f -s "$PROD_URL/health" > /dev/null; then
            echo "‚úÖ Production deployment health check passed"
            exit 0
          fi
          echo "Attempt $i/30: Waiting for service to be ready..."
          sleep 10
        done
        
        echo "‚ùå Production health check failed"
        exit 1

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: üì¢ Send notification
      env:
        STAGING_RESULT: ${{ needs.deploy-staging.result }}
        PRODUCTION_RESULT: ${{ needs.deploy-production.result }}
      run: |
        if [[ "$STAGING_RESULT" == "success" || "$PRODUCTION_RESULT" == "success" ]]; then
          echo "‚úÖ Deployment successful!"
          echo "üéâ User service has been deployed successfully"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "üîó Commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          
          # Add Slack/Discord/Teams notification here
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"‚úÖ User service deployed successfully"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          echo "‚ùå Deployment failed!"
          echo "üö® User service deployment failed"
          echo "üîó Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Add failure notification here
        fi

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
    - name: üßπ Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          console.log(`Found ${artifacts.length} artifacts for this run`);
          
          // Clean up old artifacts (keep last 10 runs)
          const { data: runs } = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'user-service-cicd.yml',
            per_page: 20,
          });
          
          const oldRuns = runs.workflow_runs.slice(10);
          
          for (const run of oldRuns) {
            try {
              const { data: oldArtifacts } = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id,
              });
              
              for (const artifact of oldArtifacts) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            } catch (error) {
              console.log(`Could not clean up run ${run.id}: ${error.message}`);
            }
          }