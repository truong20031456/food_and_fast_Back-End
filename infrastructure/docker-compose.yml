version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: food_fast_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api_gateway_1
      - api_gateway_2
    networks:
      - food_fast_frontend
      - food_fast_backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Database Cluster
  postgres_primary:
    image: postgres:15-alpine
    container_name: food_fast_postgres_primary
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - food_fast_database
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres_replica:
    image: postgres:15-alpine
    container_name: food_fast_postgres_replica
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGUSER: ${DATABASE_USER}
      POSTGRES_PRIMARY_HOST: postgres_primary
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    networks:
      - food_fast_database
    depends_on:
      postgres_primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Cluster
  redis_master:
    image: redis:7-alpine
    container_name: food_fast_redis_master
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - food_fast_cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  redis_sentinel:
    image: redis:7-alpine
    container_name: food_fast_redis_sentinel
    ports:
      - "26379:26379"
    volumes:
      - ./redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    depends_on:
      - redis_master
    networks:
      - food_fast_cache
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Search Cluster
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: food_fast_elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=food-fast-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - food_fast_search
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:${ELASTIC_PASSWORD} -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: food_fast_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - food_fast_messaging
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # API Gateway with multiple instances
  api_gateway_1:
    build:
      context: ../api_gateway
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_api_gateway_1
    env_file:
      - ../api_gateway/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/${DATABASE_NAME}
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis_master:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  api_gateway_2:
    build:
      context: ../api_gateway
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_api_gateway_2
    env_file:
      - ../api_gateway/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/${DATABASE_NAME}
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis_master:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Auth Service
  auth_service:
    build:
      context: ../auth_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_auth_service
    env_file:
      - ../auth_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8001
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/auth_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/auth_service_db
      - REDIS_URL=redis://redis_master:6379/1
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # User Service
  user_service:
    build:
      context: ../user_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_user_service
    env_file:
      - ../user_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8002
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/user_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/user_service_db
      - REDIS_URL=redis://redis_master:6379/2
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Product Service
  product_service:
    build:
      context: ../product_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_product_service
    env_file:
      - ../product_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8003
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/product_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/product_service_db
      - REDIS_URL=redis://redis_master:6379/3
      - ELASTICSEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_search
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Order Service
  order_service:
    build:
      context: ../order_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_order_service
    env_file:
      - ../order_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8004
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/order_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/order_service_db
      - REDIS_URL=redis://redis_master:6379/4
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Payment Service
  payment_service:
    build:
      context: ../payment_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_payment_service
    env_file:
      - ../payment_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8005
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/payment_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/payment_service_db
      - REDIS_URL=redis://redis_master:6379/5
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Notification Service
  notification_service:
    build:
      context: ../notification_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_notification_service
    env_file:
      - ../notification_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8006
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/notification_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/notification_service_db
      - REDIS_URL=redis://redis_master:6379/6
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - FCM_SERVER_KEY=${FCM_SERVER_KEY}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Analytics Service
  analytics_service:
    build:
      context: ../analytics_service
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: food_fast_analytics_service
    env_file:
      - ../analytics_service/.env
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8007
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/analytics_service_db
      - DATABASE_REPLICA_URL=postgresql+asyncpg://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_replica:5432/analytics_service_db
      - REDIS_URL=redis://redis_master:6379/7
      - ELASTICSEARCH_URL=http://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST}
    depends_on:
      postgres_primary:
        condition: service_healthy
      redis_master:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_search
      - food_fast_messaging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Database Backup Service
  postgres_backup:
    image: postgres:15-alpine
    container_name: food_fast_postgres_backup
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_HOST: postgres_primary
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup-postgres.sh:/usr/local/bin/backup-postgres.sh:ro
    command: >
      sh -c "
      chmod +x /usr/local/bin/backup-postgres.sh &&
      echo '0 2 * * * /usr/local/bin/backup-postgres.sh' | crontab - &&
      crond -f
      "
    depends_on:
      postgres_primary:
        condition: service_healthy
    networks:
      - food_fast_database
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: food_fast_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--alertmanager.url=http://alertmanager:9093'
    networks:
      - food_fast_monitoring
      - food_fast_backend
      - food_fast_database
      - food_fast_cache
      - food_fast_search
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: food_fast_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - food_fast_monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Exporters
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: food_fast_postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres_primary:5432/${DATABASE_NAME}?sslmode=disable"
    depends_on:
      postgres_primary:
        condition: service_healthy
    networks:
      - food_fast_monitoring
      - food_fast_database
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: food_fast_redis_exporter
    environment:
      REDIS_ADDR: "redis://redis_master:6379"
    depends_on:
      redis_master:
        condition: service_healthy
    networks:
      - food_fast_monitoring
      - food_fast_cache
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  elasticsearch_exporter:
    image: prometheuscommunity/elasticsearch-exporter:latest
    container_name: food_fast_elasticsearch_exporter
    environment:
      ES_URI: "http://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - food_fast_monitoring
      - food_fast_search
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: food_fast_rabbitmq_exporter
    environment:
      RABBIT_URL: "http://rabbitmq:15672"
      RABBIT_USER: ${RABBITMQ_USER}
      RABBIT_PASSWORD: ${RABBITMQ_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - food_fast_monitoring
      - food_fast_messaging
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  node_exporter:
    image: prom/node-exporter:latest
    container_name: food_fast_node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - food_fast_monitoring
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  # Alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: food_fast_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    networks:
      - food_fast_monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Log Management
  elasticsearch_logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: food_fast_elasticsearch_logs
    environment:
      - node.name=elasticsearch-logs
      - cluster.name=food-fast-logs-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_logs_data:/usr/share/elasticsearch/data
    networks:
      - food_fast_logging
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: food_fast_logstash
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch_logs
    networks:
      - food_fast_logging
      - food_fast_backend
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: food_fast_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch_logs:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch_logs:9200"]'
    depends_on:
      - elasticsearch_logs
    networks:
      - food_fast_logging
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Security Scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: food_fast_trivy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy_cache:/root/.cache
      - ./security/trivy-scan.sh:/usr/local/bin/trivy-scan.sh:ro
    command: >
      sh -c "
      chmod +x /usr/local/bin/trivy-scan.sh &&
      echo '0 6 * * * /usr/local/bin/trivy-scan.sh' | crontab - &&
      crond -f
      "
    networks:
      - food_fast_monitoring
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local
  postgres_backups:
    driver: local
  redis_master_data:
    driver: local
  elasticsearch_data:
    driver: local
  elasticsearch_logs_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local
  trivy_cache:
    driver: local

networks:
  # Frontend network for public access
  food_fast_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_frontend

  # Backend network for inter-service communication
  food_fast_backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_backend

  # Database network
  food_fast_database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_database

  # Cache network
  food_fast_cache:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_cache

  # Search network
  food_fast_search:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.24.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_search

  # Messaging network
  food_fast_messaging:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.25.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_messaging

  # Monitoring network
  food_fast_monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.26.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_monitoring

  # Logging network
  food_fast_logging:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.27.0.0/24
    driver_opts:
      com.docker.network.bridge.name: food_fast_logging
