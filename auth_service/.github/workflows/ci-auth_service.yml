name: Auth Service CI/CD

on:
  push:
    branches: [feature/auth_service]
    paths:
      - 'auth_service/**'
      - '.github/workflows/ci-auth_service.yml'
  pull_request:
    branches: [feature/auth_service]
    paths:
      - 'auth_service/**'
      - '.github/workflows/ci-auth_service.yml'

env:
  PYTHON_VERSION: '3.11'
  SERVICE_NAME: auth-service
  SERVICE_PORT: 8001
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-auth-service

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('auth_service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📦 Install dependencies
      working-directory: auth_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        ruff  
    - name: 🔍 Run Ruff (formatting and linting)
      working-directory: auth_service
      run: |
        ruff format --check .
        ruff check .
        
    - name: 🔍 Run MyPy (type checking)
      working-directory: auth_service
      run: |
        mypy . --ignore-missing-imports
      continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_auth_service_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('auth_service/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📦 Install dependencies
      working-directory: auth_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: 🔧 Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://test_user:postgres@localhost:5432/test_auth_service_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.AUTH_SERVICE_SECRET_KEY || 'test_secret_key_for_ci_cd' }}" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY || 'test_jwt_secret_key_for_ci_cd' }}" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Wait for Redis
      run: |
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
    - name: ✅ Run tests with pytest
      working-directory: auth_service
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:postgres@localhost:5432/test_auth_service_db
        REDIS_URL: redis://localhost:6379/0
        DEBUG: true
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=term-missing
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: auth_service/coverage.xml
        flags: auth-service
        name: auth-service-coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      working-directory: auth_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔒 Run Bandit security linter
      working-directory: auth_service
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt || true
        
    - name: 🔒 Run Safety check
      working-directory: auth_service
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check --text --output safety-report.txt || true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build Docker image
      working-directory: auth_service
      run: |
        docker build -t ${{ env.SERVICE_NAME }}:test .
        
    - name: 🧪 Test Docker image
      working-directory: auth_service
      run: |
        docker run --rm ${{ env.SERVICE_NAME }}:test python -c "import fastapi; print('FastAPI import successful')"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./auth_service
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying auth service to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "Deploying auth service to production environment..."