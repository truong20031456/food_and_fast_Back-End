# Docker Compose for Staging Environment
# Food Fast E-commerce - Staging Configuration

version: '3.8'

services:
  # ========================================
  # üóÑÔ∏è Database Services
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: food_fast_postgres_staging
    environment:
      POSTGRES_DB: food_fast_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./scripts/init-dbs.sql:/docker-entrypoint-initdb.d/init-dbs.sql
    ports:
      - "5432:5432"
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: food_fast_redis_staging
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data_staging:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - food_fast_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # üöÄ Core Application Services
  # ========================================
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_api_gateway_staging
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_auth_staging
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_user_staging
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./product_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_product_staging
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./order_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_order_staging
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_payment_staging
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/5
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_notification_staging
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/6
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics-service:
    build:
      context: ./analytics_service
      dockerfile: Dockerfile
      args:
        ENV: staging
    container_name: food_fast_analytics_staging
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/7
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # üìä Monitoring Stack
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: food_fast_prometheus_staging
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_staging:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - food_fast_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: food_fast_grafana_staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - food_fast_network
    restart: unless-stopped

  # ========================================
  # üîÑ Background Workers
  # ========================================
  celery-worker:
    build:
      context: ./shared_code
      dockerfile: Dockerfile.celery
    container_name: food_fast_celery_staging
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/8
    depends_on:
      - redis
      - postgres
    networks:
      - food_fast_network
    restart: unless-stopped
    command: celery -A shared_code.core.celery worker --loglevel=info

  celery-beat:
    build:
      context: ./shared_code
      dockerfile: Dockerfile.celery
    container_name: food_fast_celery_beat_staging
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_staging
      - REDIS_URL=redis://redis:6379/8
    depends_on:
      - redis
      - postgres
    networks:
      - food_fast_network
    restart: unless-stopped
    command: celery -A shared_code.core.celery beat --loglevel=info

  # ========================================
  # üîß Utility Services
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: food_fast_nginx_staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/staging.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - food_fast_network
    restart: unless-stopped

# ========================================
# üì¶ Volumes
# ========================================
volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local
  prometheus_data_staging:
    driver: local
  grafana_data_staging:
    driver: local

# ========================================
# üåê Networks
# ========================================
networks:
  food_fast_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
