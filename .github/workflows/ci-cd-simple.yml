name: Food Fast E-commerce CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository_owner }}/food-fast

jobs:
  # Build và Test tất cả services
  build-and-test:
    name: Build & Test Services
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodfast_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-master.txt
          
      - name: 🧪 Run Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/foodfast_test
          REDIS_URL: redis://localhost:6379
        run: |
          # Test shared code
          cd shared_code && python -m pytest tests/ -v --tb=short || true
          
          # Test each service
          for service in auth_service user_service product_service order_service payment_service notification_service analytics_service; do
            echo "Testing $service..."
            cd $service
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
            if [ -d "tests" ]; then
              python -m pytest tests/ -v --tb=short || true
            fi
            cd ..
          done
          
      - name: 🔍 Code Quality Check
        run: |
          # Install linting tools
          pip install flake8 black isort
          
          # Format check
          black --check --diff . || true
          
          # Import sorting check
          isort --check-only --diff . || true
          
          # Lint check
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

  # Build Docker images cho production
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: 
          - api_gateway
          - auth_service  
          - user_service
          - product_service
          - order_service
          - payment_service
          - notification_service
          - analytics_service
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your deployment logic here
          # For example: kubectl apply, docker-compose, etc.
          
      - name: 🧪 Health Check
        run: |
          echo "🔍 Running health checks..."
          # Add health check logic here
          
      - name: 📢 Notify Deployment
        run: |
          echo "✅ Deployment to staging completed successfully!"

  # Basic Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Security Scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_YAML: true
