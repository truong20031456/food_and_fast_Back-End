name: User Service CI/CD

on:
  push:
    paths:
      - 'user_service/**'
    branches: [feature/user_service]
  pull_request:
    paths:
      - 'user_service/**'
    branches: [feature/user_service]

jobs:
  test:
    name: Test User Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_user_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('user_service/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: 📦 Install dependencies
        run: |
          cd user_service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
          pip install pytest pytest-asyncio pytest-cov httpx
         
      - name: 🔧 Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_user_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ALGORITHM=HS256" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
          echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV
          
      - name: 🗄️ Initialize database
        run: |
          cd user_service
          python -c "
          from core.database import engine, Base
          Base.metadata.create_all(bind=engine)
          print('Database tables created successfully')
          "
          
      - name: ✅ Run Unit Tests
        run: |
          cd user_service
          pytest tests/ -v --tb=short --cov=. --cov-report=term-missing --cov-report=xml --cov-report=html
          
      - name: 📊 Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: user-service-coverage-${{ github.run_number }}
          path: |
            user_service/coverage.xml
            user_service/htmlcov/
          retention-days: 30
          
      - name: 🔍 Run Ruff (lint and format check)
        run: |
          cd user_service
          ruff check .
          ruff format --check
          
      - name: 🔒 Run Security Checks
        run: |
          cd user_service
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: user-service-security-${{ github.run_number }}
          path: |
            user_service/bandit-report.json
            user_service/safety-report.json
          retention-days: 30

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./user_service
          push: true
          tags: |
            truongcaovan/user_service:latest
            truongcaovan/user_service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying user service to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/user-service.yaml

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying user service to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/user-service.yaml 
