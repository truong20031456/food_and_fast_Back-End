name: E2E Testing & Load Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # E2E Testing Job
  e2e-testing:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodfast_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install docker-compose
          pip install pytest pytest-asyncio httpx
          
      - name: 🔧 Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/foodfast_e2e_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_e2e" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=test_jwt_secret_key_for_e2e" >> $GITHUB_ENV
          
      - name: 🚀 Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
      - name: ⏳ Wait for services to be ready
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh development all
          
      - name: 🧪 Run E2E tests
        run: |
          cd tests/e2e
          pytest -v --tb=short --maxfail=5
          
      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: tests/e2e/reports/
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Load Testing Job
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: e2e-testing
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust requests pyyaml
          
      - name: 🚀 Start services for load testing
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
      - name: ⏳ Wait for services
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh development all
          
      - name: 🔥 Run load tests
        run: |
          chmod +x ./scripts/load_test.py
          python ./scripts/load_test.py --environment development --scenario load
          
      - name: 📊 Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: load_tests/results/
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Performance Regression Testing
  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    needs: load-testing
    if: github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📊 Download previous results
        uses: actions/download-artifact@v3
        with:
          name: load-test-results
          path: current-results/
          
      - name: 📈 Compare performance metrics
        run: |
          python ./scripts/performance_compare.py --current current-results/ --baseline baseline-results/
          
      - name: 💬 Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './performance-report.md';
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

  # Security Testing
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔍 Run OWASP ZAP security scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:8000 -J zap-report.json || true
            
      - name: 📊 Upload ZAP scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: zap-report.json

  # Database Migration Testing
  migration-testing:
    name: Database Migration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          find . -name "requirements.txt" -exec pip install -r {} \;
          
      - name: 🗄️ Test database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
        run: |
          chmod +x ./scripts/migrate.sh
          ./scripts/migrate.sh development all migrate
          
      - name: 🔄 Test migration rollback
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
        run: |
          ./scripts/migrate.sh development all rollback
          
      - name: ✅ Verify database integrity
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test
        run: |
          ./scripts/migrate.sh development all status

  # API Documentation Testing
  api-docs-testing:
    name: API Documentation Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
      - name: ⏳ Wait for services
        run: |
          chmod +x ./scripts/health-check.sh
          ./scripts/health-check.sh development all
          
      - name: 📚 Test OpenAPI documentation
        run: |
          # Test that all services provide valid OpenAPI specs
          services=("api-gateway" "auth-service" "user-service" "product-service" "order-service" "payment-service" "notification-service" "analytics-service")
          ports=(8000 8001 8002 8003 8004 8005 8006 8007)
          
          for i in "${!services[@]}"; do
            service=${services[i]}
            port=${ports[i]}
            echo "Testing OpenAPI docs for $service on port $port"
            
            # Check if docs endpoint is accessible
            curl -f "http://localhost:$port/docs" || exit 1
            
            # Validate OpenAPI spec
            curl -f "http://localhost:$port/openapi.json" | python -m json.tool > /dev/null || exit 1
          done
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Notification on completion
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [e2e-testing, load-testing, security-testing, migration-testing, api-docs-testing]
    if: always()
    
    steps:
      - name: 📝 Prepare notification
        run: |
          echo "## 🚀 CI/CD Pipeline Results" > notification.md
          echo "" >> notification.md
          echo "**E2E Testing:** ${{ needs.e2e-testing.result }}" >> notification.md
          echo "**Load Testing:** ${{ needs.load-testing.result }}" >> notification.md
          echo "**Security Testing:** ${{ needs.security-testing.result }}" >> notification.md
          echo "**Migration Testing:** ${{ needs.migration-testing.result }}" >> notification.md
          echo "**API Docs Testing:** ${{ needs.api-docs-testing.result }}" >> notification.md
          echo "" >> notification.md
          echo "**Repository:** ${{ github.repository }}" >> notification.md
          echo "**Branch:** ${{ github.ref_name }}" >> notification.md
          echo "**Commit:** ${{ github.sha }}" >> notification.md
          
      - name: 💬 Create issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const notification = fs.readFileSync('notification.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 CI/CD Pipeline Failed - ${context.sha.substring(0, 7)}`,
              body: notification,
              labels: ['bug', 'ci/cd', 'urgent']
            });
