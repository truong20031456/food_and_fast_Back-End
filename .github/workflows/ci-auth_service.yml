name: Auth Service CI/CD

on:
  push:
    paths:
      - 'auth_service/**'
    branches: [feature/auth_service]
  pull_request:
    paths:
      - 'auth_service/**'
    branches: [feature/auth_service]

jobs:
  test:
    name: Test Auth Service
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/feature/auth_service'
    steps:
      # Checkout the code
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Set up Python 3.11
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Cache pip dependencies
      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('auth_service/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: 📦 Install dependencies
        run: |
          cd auth_service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi
          pip install pytest pytest-asyncio pytest-cov httpx

      # Set up environment variables
      - name: 🔧 Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_auth_db" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci_cd" >> $GITHUB_ENV
          echo "ALGORITHM=HS256" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
          echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> $GITHUB_ENV

      # Initialize database
      - name: 🗄️ Initialize database
        run: |
          cd auth_service
          python -c "
          from core.database import engine, Base
          import asyncio
          async def create():
            async with engine.begin() as conn:
              await conn.run_sync(Base.metadata.create_all)
          asyncio.run(create())
          print('Database tables created successfully')
          "

      # Run Unit Tests
      - name: ✅ Run Unit Tests
        run: |
          cd auth_service
          pytest tests/ -v --tb=short --cov=. --cov-report=term-missing --cov-report=xml --cov-report=html

      # Upload Coverage Report
      - name: 📊 Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: auth-service-coverage-${{ github.run_number }}
          path: |
            auth_service/coverage.xml
            auth_service/htmlcov/
          retention-days: 30

      # Run Ruff (lint and format check)
      - name: 🔍 Run Ruff (lint and format check)
        run: |
          cd auth_service
          ruff check .
          ruff format --check

      # Run Security Checks
      - name: 🔒 Run Security Checks
        run: |
          cd auth_service
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      # Upload Security Reports
      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: auth-service-security-${{ github.run_number }}
          path: |
            auth_service/bandit-report.json
            auth_service/safety-report.json
          retention-days: 30

      # Clean up temporary files
      - name: 🧹 Clean up
        run: |
          cd auth_service
          rm -rf htmlcov coverage.xml bandit-report.json safety-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      # Checkout the code
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and push Docker image
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./auth_service
          push: true
          tags: |
            truongcaovan/auth_service:latest
            truongcaovan/auth_service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
      # Deploy to staging
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying auth service to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      # Deploy to production
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying auth service to production environment..."
