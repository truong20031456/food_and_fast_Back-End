name: Analytics Service CI/CD

on:
  push:
    branches: [main, develop, 'feature/*']
    paths:
      - 'analytics_service/**'
      - '.github/workflows/ci-analytics-service.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'analytics_service/**'
      - '.github/workflows/ci-analytics-service.yml'

env:
  PYTHON_VERSION: '3.11'
  SERVICE_NAME: analytics-service
  SERVICE_PORT: 8007
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-analytics-service

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      working-directory: analytics_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy bandit safety
        
    - name: 🔍 Run Ruff (formatting and linting)
      working-directory: analytics_service
      run: |
        ruff format --check . || echo "⚠️ Formatting issues found"
        ruff check . || echo "⚠️ Linting issues found"
        
    - name: 🔍 Run MyPy (type checking)
      working-directory: analytics_service
      run: |
        mypy . --ignore-missing-imports || echo "⚠️ Type checking issues found"
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      working-directory: analytics_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
    - name: 🔒 Run Bandit security linter
      working-directory: analytics_service
      run: |
        bandit -r . -f json -o bandit-report.json || echo "⚠️ Security issues found"
        bandit -r . -f txt || echo "⚠️ Security issues found"
        
    - name: 🔒 Run Safety check
      working-directory: analytics_service
      run: |
        safety check || echo "⚠️ Vulnerability issues found"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_analytics_service_db
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      working-directory: analytics_service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://test_user:postgres@localhost:5432/test_analytics_service_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci_cd" >> $GITHUB_ENV
        echo "DEBUG=true" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        
    - name: ⏳ Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost ping | grep -q PONG; do sleep 2; done'
        
    - name: ✅ Run tests with pytest
      working-directory: analytics_service
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=50 || echo "⚠️ Tests failed or coverage below threshold"
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: analytics_service/coverage.xml
        flags: analytics-service
        name: analytics-service-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Build Docker image
      working-directory: analytics_service
      run: |
        docker build -t ${{ env.SERVICE_NAME }}:test .
        
    - name: 🧪 Test Docker image
      working-directory: analytics_service
      run: |
        docker run --rm ${{ env.SERVICE_NAME }}:test python -c "
        try:
            import fastapi
            import sqlalchemy
            import pandas
            import numpy
            print('✅ All imports successful')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🐳 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./analytics_service
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging-analytics-service.example.com
    
    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying analytics service to staging environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://analytics-service.example.com
    
    steps:
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying analytics service to production environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Add actual deployment commands here
