# Docker Compose for Production Environment
# Food Fast E-commerce - Production Configuration

version: '3.8'

services:
  # ========================================
  # üóÑÔ∏è Database Services
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: food_fast_postgres_prod
    environment:
      POSTGRES_DB: food_fast_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-dbs.sql:/docker-entrypoint-initdb.d/init-dbs.sql
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  redis:
    image: redis:7-alpine
    container_name: food_fast_redis_prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
      - ./infrastructure/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - food_fast_network
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ========================================
  # üöÄ Core Application Services
  # ========================================
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
      args:
        ENV: production
    container_name: food_fast_api_gateway_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  auth-service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/2
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./product_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/3
      - SECRET_KEY=${SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./order_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/4
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./payment_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/5
      - SECRET_KEY=${SECRET_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/6
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_SERVER=${MAIL_SERVER}
      - SMS_API_KEY=${SMS_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics-service:
    build:
      context: ./analytics_service
      dockerfile: Dockerfile
      args:
        ENV: production
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/7
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # üîÑ Background Workers (Production Scale)
  # ========================================
  celery-worker:
    build:
      context: ./shared_code
      dockerfile: Dockerfile.celery
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/8
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
      - postgres
    networks:
      - food_fast_network
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    command: celery -A shared_code.core.celery worker --loglevel=warning --concurrency=4

  celery-beat:
    build:
      context: ./shared_code
      dockerfile: Dockerfile.celery
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - REDIS_URL=redis://redis:6379/8
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
      - postgres
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    command: celery -A shared_code.core.celery beat --loglevel=warning

  # ========================================
  # üìä Monitoring Stack (Production)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: food_fast_prometheus_prod
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=720h'  # 30 days
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  grafana:
    image: grafana/grafana:latest
    container_name: food_fast_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ========================================
  # üîß Production Infrastructure
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: food_fast_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/production.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - ./infrastructure/nginx/logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ========================================
  # üìä Log Management
  # ========================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: food_fast_elasticsearch_prod
    environment:
      - node.name=es01
      - cluster.name=food-fast-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    networks:
      - food_fast_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: food_fast_logstash_prod
    volumes:
      - ./infrastructure/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - food_fast_network
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: food_fast_kibana_prod
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - food_fast_network
    restart: always

  # ========================================
  # üîÑ Backup Services
  # ========================================
  backup-service:
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: food_fast_backup_prod
    environment:
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/food_fast_prod
      - AWS_ACCESS_KEY_ID=${BACKUP_AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${BACKUP_AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - food_fast_network
    restart: always

# ========================================
# üì¶ Volumes (Production)
# ========================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  elasticsearch_data_prod:
    driver: local

# ========================================
# üåê Networks (Production)
# ========================================
networks:
  food_fast_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
